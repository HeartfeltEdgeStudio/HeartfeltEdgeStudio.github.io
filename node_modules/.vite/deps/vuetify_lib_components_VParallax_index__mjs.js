import "./chunk-4UKJGR4I.js";
import {
  VImg
} from "./chunk-3R552TZX.js";
import "./chunk-SJGZ2NV4.js";
import "./chunk-MR5P2R6U.js";
import "./chunk-YXDKWIZY.js";
import "./chunk-V6R6N74B.js";
import {
  useDisplay
} from "./chunk-3CTTTE5X.js";
import "./chunk-2QD4EAFV.js";
import {
  useIntersectionObserver
} from "./chunk-RUVBOPOI.js";
import "./chunk-YDFELXWP.js";
import "./chunk-YHBHQUFH.js";
import "./chunk-ZXTZQT6G.js";
import {
  useResizeObserver
} from "./chunk-5MUEZXLY.js";
import "./chunk-G5CGXBHG.js";
import "./chunk-3ULFWGHJ.js";
import "./chunk-NBO5JF3X.js";
import "./chunk-52UXOPSE.js";
import {
  clamp,
  genericComponent,
  getScrollParent,
  makeComponentProps,
  propsFactory,
  useRender
} from "./chunk-GCTC5IYP.js";
import {
  computed,
  createVNode,
  onBeforeUnmount,
  ref,
  watch,
  watchEffect
} from "./chunk-YBGSFZ7G.js";
import "./chunk-VUNV25KB.js";

// node_modules/vuetify/lib/components/VParallax/VParallax.mjs
import "C:/Users/Franc/Desktop/test/HeartfeltEdgeStudio.github.io/node_modules/vuetify/lib/components/VParallax/VParallax.css";
function floor(val) {
  return Math.floor(Math.abs(val)) * Math.sign(val);
}
var makeVParallaxProps = propsFactory({
  scale: {
    type: [Number, String],
    default: 0.5
  },
  ...makeComponentProps()
}, "VParallax");
var VParallax = genericComponent()({
  name: "VParallax",
  props: makeVParallaxProps(),
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const {
      intersectionRef,
      isIntersecting
    } = useIntersectionObserver();
    const {
      resizeRef,
      contentRect
    } = useResizeObserver();
    const {
      height: displayHeight
    } = useDisplay();
    const root = ref();
    watchEffect(() => {
      var _a;
      intersectionRef.value = resizeRef.value = (_a = root.value) == null ? void 0 : _a.$el;
    });
    let scrollParent;
    watch(isIntersecting, (val) => {
      if (val) {
        scrollParent = getScrollParent(intersectionRef.value);
        scrollParent = scrollParent === document.scrollingElement ? document : scrollParent;
        scrollParent.addEventListener("scroll", onScroll, {
          passive: true
        });
        onScroll();
      } else {
        scrollParent.removeEventListener("scroll", onScroll);
      }
    });
    onBeforeUnmount(() => {
      scrollParent == null ? void 0 : scrollParent.removeEventListener("scroll", onScroll);
    });
    watch(displayHeight, onScroll);
    watch(() => {
      var _a;
      return (_a = contentRect.value) == null ? void 0 : _a.height;
    }, onScroll);
    const scale = computed(() => {
      return 1 - clamp(+props.scale);
    });
    let frame = -1;
    function onScroll() {
      if (!isIntersecting.value) return;
      cancelAnimationFrame(frame);
      frame = requestAnimationFrame(() => {
        var _a;
        const el = ((_a = root.value) == null ? void 0 : _a.$el).querySelector(".v-img__img");
        if (!el) return;
        const scrollHeight = scrollParent instanceof Document ? document.documentElement.clientHeight : scrollParent.clientHeight;
        const scrollPos = scrollParent instanceof Document ? window.scrollY : scrollParent.scrollTop;
        const top = intersectionRef.value.getBoundingClientRect().top + scrollPos;
        const height = contentRect.value.height;
        const center = top + (height - scrollHeight) / 2;
        const translate = floor((scrollPos - center) * scale.value);
        const sizeScale = Math.max(1, (scale.value * (scrollHeight - height) + height) / height);
        el.style.setProperty("transform", `translateY(${translate}px) scale(${sizeScale})`);
      });
    }
    useRender(() => createVNode(VImg, {
      "class": ["v-parallax", {
        "v-parallax--active": isIntersecting.value
      }, props.class],
      "style": props.style,
      "ref": root,
      "cover": true,
      "onLoadstart": onScroll,
      "onLoad": onScroll
    }, slots));
    return {};
  }
});
export {
  VParallax
};
//# sourceMappingURL=vuetify_lib_components_VParallax_index__mjs.js.map
